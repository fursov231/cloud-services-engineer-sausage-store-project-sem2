apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        envFrom:
          - configMapRef:
              name: mongodb-conf
        ports:
        - containerPort: {{ .Values.mongodb.containerPort }}
        resources:
{{ toYaml .Values.mongodb.resources | indent 10 }}
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.mongodb.storage }}
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  ports:
  - port: {{ .Values.mongodb.containerPort }}
    targetPort: {{ .Values.mongodb.containerPort }}
  selector:
    app: mongodb
  clusterIP: None
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-mongodb-init
  annotations:
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: mongodb-init
    spec:
      restartPolicy: OnFailure
      containers:
        - name: mongo-init
          image: mongo:7.0
          command:
            - sh
            - -c
            - |
              echo "Waiting for MongoDB to be ready...";
              until mongosh "mongodb://$MONGO_INITDB_ROOT_USERNAME:$MONGO_INITDB_ROOT_PASSWORD@mongodb:{{ .Values.mongodb.containerPort }}/admin" --eval "db.adminCommand('ping')" > /dev/null 2>&1; do
              echo "MongoDB not ready, sleeping...";
              sleep 2;
              done
              echo "MongoDB is ready. Creating db and user..."
              mongosh "mongodb://$MONGO_INITDB_ROOT_USERNAME:$MONGO_INITDB_ROOT_PASSWORD@mongodb:{{ .Values.mongodb.containerPort }}/admin" --eval '
                db = db.getSiblingDB("{{ .Values.mongodb.reportDb }}");
                db.createUser({
                  user: "{{ .Values.mongodb.reportUser }}",
                  pwd: "{{ .Values.mongodb.reportPassword }}",
                  roles: [{ role: "readWrite", db: "{{ .Values.mongodb.reportDb }}" }]
                });
              '
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: mongodb-conf
                  key: MONGO_INITDB_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: mongodb-conf
                  key: MONGO_INITDB_ROOT_PASSWORD
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-conf
data:
  MONGO_INITDB_ROOT_USERNAME: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME | quote }}
  MONGO_INITDB_ROOT_PASSWORD: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD | quote }}